<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.101.0">Hugo</generator>
    <title>Ismael Serghini&#39;s Blog</title>
            <link href="https://iserghini.github.io/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://iserghini.github.io/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-08-04T17:32:17+01:00</updated>
    <id>https://iserghini.github.io/</id>
        <entry>
            <title>Netbox automation using Pynetbox</title>
            <link href="https://iserghini.github.io/posts/netbox-automation-using-pynetbox/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://iserghini.github.io/posts/netbox-automation-using-pynetbox/</id>
                    <author>
                        <name>Ismael</name>
                    </author>
            <published>2022-08-03T00:00:00+00:00</published>
            <updated>2022-08-03T00:00:00+00:00</updated>
            <content type="html">
                &lt;p&gt;Pynetbox is a Python API client library for Netbox. In other words, it&amp;rsquo;s a library that does all the heavy lifting for us when it comes to dealing with the Netbox API. It saves us from having to craft our own API calls using the Python Requests library or the likes&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Where I see it especially useful is when it comes to how easy it makes it to search, update or delete existing data. Once you understand its structure (hopefully by the end of reading this post you will), you find it intuitive and easy to get useful work done quickly.&lt;/p&gt;
  &lt;div class=&#34;gblog-toc gblog-toc__level--6&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#installing-pynetbox-and-generating-a-token&#34;&gt;Installing Pynetbox and generating a token&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#understanding-the-pynetbox-api&#34;&gt;Understanding the Pynetbox API&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#api-object&#34;&gt;.api() object&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#netbox-apps&#34;&gt;Netbox apps&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#endpoints&#34;&gt;Endpoints&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#methods&#34;&gt;Methods&lt;/a&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;a href=&#34;#data-retrieval&#34;&gt;Data retrieval&lt;/a&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;a href=&#34;#all-method&#34;&gt;all() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#choices-method&#34;&gt;choices() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#count-method&#34;&gt;count() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#filter-method&#34;&gt;filter() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#get-method&#34;&gt;get() method&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;&lt;a href=&#34;#working-with-the-data&#34;&gt;Working with the data&lt;/a&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;a href=&#34;#create-method&#34;&gt;create() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#save-method&#34;&gt;save() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#update-method&#34;&gt;update() method&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;#delete-method&#34;&gt;delete() method&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
    &lt;hr /&gt;
  &lt;/div&gt;


&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;installing-pynetbox-and-generating-a-token&#34;&gt;
        Installing Pynetbox and generating a token
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#installing-pynetbox-and-generating-a-token&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Installing Pynetbox and generating a token&#34; href=&#34;#installing-pynetbox-and-generating-a-token&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;The installation is very easy as we can directly use pip for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pynetbox&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we want to not only get information from Netbox but to create it, we need a read and write access token - this is actually what we want here.&lt;/p&gt;
&lt;p&gt;In order to create a token, you need to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the Netbox admin panel.&lt;/li&gt;
&lt;/ol&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token1.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token1_huc3b53b2bb2e9a7b5f020290bda06ce43_431143_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token1_huc3b53b2bb2e9a7b5f020290bda06ce43_431143_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token1_huc3b53b2bb2e9a7b5f020290bda06ce43_431143_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Under users, add Token.&lt;/li&gt;
&lt;/ol&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token2.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token2_huc3b53b2bb2e9a7b5f020290bda06ce43_283157_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token2_huc3b53b2bb2e9a7b5f020290bda06ce43_283157_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token2_huc3b53b2bb2e9a7b5f020290bda06ce43_283157_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Select the user, click &amp;lsquo;write enabled&amp;rsquo; and &amp;lsquo;save&amp;rsquo;.&lt;/li&gt;
&lt;/ol&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token3.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token3_huc3b53b2bb2e9a7b5f020290bda06ce43_325866_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token3_huc3b53b2bb2e9a7b5f020290bda06ce43_325866_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/token3_huc3b53b2bb2e9a7b5f020290bda06ce43_325866_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;






&lt;blockquote class=&#34;gblog-hint note&#34;&gt;
  &lt;div class=&#34;gblog-hint__title flex align-center&#34;&gt;&lt;i class=&#34;fa note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;&lt;/div&gt;
  &lt;div class=&#34;gblog-hint__text&#34;&gt;If you&amp;rsquo;ve followed the tutorial 
&lt;a href=&#34;https://iserghini.com/posts/docker-netbox-and-api/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;

 to build Netbox Docker, you should already have a write-enabled token - the same I&amp;rsquo;m using in the upcoming examples.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;understanding-the-pynetbox-api&#34;&gt;
        Understanding the Pynetbox API
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#understanding-the-pynetbox-api&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Understanding the Pynetbox API&#34; href=&#34;#understanding-the-pynetbox-api&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;As per the Pynetbox Github&amp;rsquo;s 
&lt;a href=&#34;https://github.com/netbox-community/pynetbox&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The pynetbox API is setup so that NetBox&amp;rsquo;s apps are attributes of the .api() object, and in turn those apps have attribute representing each endpoint. Each endpoint has a handful of methods available to carry out actions on the endpoint.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the saying goes&amp;hellip;a picture is worth a thousand words:&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/pynetbox_api_structure.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/pynetbox_api_structure_hub8b4e4f39c66a7eaee12ab97e34435f5_749432_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/pynetbox_api_structure_hub8b4e4f39c66a7eaee12ab97e34435f5_749432_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/pynetbox_api_structure_hub8b4e4f39c66a7eaee12ab97e34435f5_749432_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;api-object&#34;&gt;
        .api() object
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#api-object&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor .api() object&#34; href=&#34;#api-object&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;The first thing we need to do to work with Pynetbox is to instantiate the API object, everything else we discuss from here on assumes we have the &amp;rsquo;nb&amp;rsquo; API object&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pynetbox&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NETBOX_URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;TOKEN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;0123456789abcdef0123456789abcdef01234567&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pynetbox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NETBOX_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also the option to include multi-thread calls for the .filter() and .all() methods by adding the following extra parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pynetbox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NETBOX_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;netbox-apps&#34;&gt;
        Netbox apps
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#netbox-apps&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Netbox apps&#34; href=&#34;#netbox-apps&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;These are the top-level hierarchies for the type of data we can retrieve, create, modify and delete. Below are all the apps supported by Pynetbox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dcim&lt;/li&gt;
&lt;li&gt;ipam&lt;/li&gt;
&lt;li&gt;circuits&lt;/li&gt;
&lt;li&gt;secrets (on NetBox 2.11 and older)&lt;/li&gt;
&lt;li&gt;tenancy&lt;/li&gt;
&lt;li&gt;extras&lt;/li&gt;
&lt;li&gt;virtualization&lt;/li&gt;
&lt;li&gt;users (since NetBox 2.9)&lt;/li&gt;
&lt;li&gt;wireless (since NetBox 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go to the API documentation 
&lt;a href=&#34;http://localhost:8000/api/docs/&#34; target=&#34;_blank&#34;&gt;http://localhost:8000/api/docs/&lt;/a&gt;

  you will find all the above apps - you may think that&amp;rsquo;s exactly what&amp;rsquo;s above, but wait for the next section.&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/netbox_apps.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/netbox_apps_hu3696feb47ffc8771e71e48c2c1a4779a_108804_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/netbox_apps_hu3696feb47ffc8771e71e48c2c1a4779a_108804_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/netbox_apps_hu3696feb47ffc8771e71e48c2c1a4779a_108804_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;endpoints&#34;&gt;
        Endpoints
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#endpoints&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Endpoints&#34; href=&#34;#endpoints&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s where we find the specifics for the general data we selected in the previous step. For instance, we use apps to distinguish between DCIM (physical stuff) and IPAM (IP address management), but once we&amp;rsquo;ve done that, how do we know how to interact with &amp;ldquo;cables&amp;rdquo; specifically? That&amp;rsquo;s what endpoints is all about.&lt;/p&gt;
&lt;p&gt;In the API documentation, if we click on the /dcim/ section (already clicked by default), we find all the options available (not all shown in the screenshot):&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/api1.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/api1_huc3b53b2bb2e9a7b5f020290bda06ce43_511733_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/api1_huc3b53b2bb2e9a7b5f020290bda06ce43_511733_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/api1_huc3b53b2bb2e9a7b5f020290bda06ce43_511733_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;p&gt;From the above, we understand that to deal with cables we need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cables&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;?????&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re almost there, just one more step left: methods.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;methods&#34;&gt;
        Methods
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#methods&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Methods&#34; href=&#34;#methods&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;At a high level we can divide them in two categories: methods to retrieve data from Netbox and methods to work with the data, whether is creating, modifying, or deleting it.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h4 id=&#34;data-retrieval&#34;&gt;
        Data retrieval
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#data-retrieval&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Data retrieval&#34; href=&#34;#data-retrieval&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h4&gt;
&lt;/div&gt;
&lt;p&gt;These are the main methods to retrieve information from Netbox, I won&amp;rsquo;t be covering all the methods/features so, please check the documentation to find all the details.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;all-method&#34;&gt;
        all() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#all-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor all() method&#34; href=&#34;#all-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;Returns all objects from a given endpoint. Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vendors_all&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vendor&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vendors_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vendor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Arista&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Cisco&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Fortinet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Juniper&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;choices-method&#34;&gt;
        choices() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#choices-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor choices() method&#34; href=&#34;#choices-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;Returns all choices from a given endpoint, keep in mind that this method is totally dependent on the endpoint you&amp;rsquo;re querying, as you&amp;rsquo;re going to see next, some endpoints don&amp;rsquo;t show anything.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;devices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;airflow&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Front to rear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;front-to-rear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Rear to front&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rear-to-front&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Left to right&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;left-to-right&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Right to left&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;right-to-left&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Side to rear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;side-to-rear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Passive&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;passive&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Mixed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mixed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;face&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Front&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;front&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Rear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Offline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;offline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Planned&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;planned&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Staged&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;staged&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Failed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Inventory&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;inventory&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;display_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Decommissioning&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;decommissioning&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the &amp;ldquo;manufacturers&amp;rdquo; endpoint we don&amp;rsquo;t have any choices, as opposed to the &amp;ldquo;devices&amp;rdquo; one which does have some.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;count-method&#34;&gt;
        count() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#count-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor count() method&#34; href=&#34;#count-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;It counts the number of matches for your specific query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that it matches what we saw earlier with the all() method.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;filter-method&#34;&gt;
        filter() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#filter-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor filter() method&#34; href=&#34;#filter-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;This method is quite useful, especially when we have a large dataset. The best way to use it is by filtering based on actual fields of the endpoint you&amp;rsquo;re querying.&lt;/p&gt;
&lt;p&gt;For example, for manufacturers, we have the &amp;ldquo;Name&amp;rdquo; field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter_manufacturer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Cisco&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;manufacturer&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter_manufacturer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Cisco&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we try we a vendor that doesn&amp;rsquo;t exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter_manufacturer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Nvidia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;manufacturer&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter_manufacturer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It doesn&amp;rsquo;t return anything as there is none.&lt;/p&gt;
&lt;p&gt;Another example, let&amp;rsquo;s say we want to know if we have in the device model &amp;ldquo;DCS-7010T-48&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter_device_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;device_types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DCS-7010T-48&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;device&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter_device_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DCS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7010&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may wonder&amp;hellip;the &amp;ldquo;device_types&amp;rdquo; endpoint is fine, you found it in the Netbox API docs but how about the filtering variable &amp;ldquo;model&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;I went to the Netbox GUI, click edit on the device and found it there. Anything supported by the endpoint can be used as a filtering variable.&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_hue2f2584f05cc7854011aceb513579556_201621_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_hue2f2584f05cc7854011aceb513579556_201621_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_hue2f2584f05cc7854011aceb513579556_201621_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;p&gt;You can also find it in the Netbox API docs:&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_api.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_api_hua4a695da4325de0802cb2220c7c6eaf0_136673_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_api_hua4a695da4325de0802cb2220c7c6eaf0_136673_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/model_api_hua4a695da4325de0802cb2220c7c6eaf0_136673_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;






&lt;blockquote class=&#34;gblog-hint warning&#34;&gt;
  &lt;div class=&#34;gblog-hint__title flex align-center&#34;&gt;&lt;i class=&#34;fa warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;&lt;/div&gt;
  &lt;div class=&#34;gblog-hint__text&#34;&gt;Any endpoint that uses hyphens, when converted to Pynetbox syntax, must be converted to underscores, as per above (device_types as opposed to device-types). Otherwise, you&amp;rsquo;ll get a nice &amp;ldquo;NameError&amp;rdquo; Python exception.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;get-method&#34;&gt;
        get() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#get-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor get() method&#34; href=&#34;#get-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;Finally, the last method in this section, and probably the most important as it&amp;rsquo;s heavily relied upon by the &amp;ldquo;working with data&amp;rdquo; methods.&lt;/p&gt;
&lt;p&gt;The difference between all(), filter(), and get() is that all() and filter() provide shallow information about what&amp;rsquo;s queried i.e. just the names but get() provides a lot of information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Cisco&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cisco&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At face value, it seems like it provides just the names similarly to all() and filter() but if we cast the object as a dictionary we can see that there is a lot more to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dcim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;manufacturers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Cisco&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/dcim/manufacturers/2/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cisco&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cisco&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cisco&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T06:52:44.486022Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T06:52:44.486036Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;devicetype_count&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;523&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;inventoryitem_count&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;platform_count&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h4 id=&#34;working-with-the-data&#34;&gt;
        Working with the data
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#working-with-the-data&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Working with the data&#34; href=&#34;#working-with-the-data&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h4&gt;
&lt;/div&gt;
&lt;p&gt;In this section, we&amp;rsquo;re going to discuss the methods that allow us to do more than just querying the data - keep in mind that these methods require a &amp;lsquo;write enabled&amp;rsquo; token.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;create-method&#34;&gt;
        create() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#create-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor create() method&#34; href=&#34;#create-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;In this example, we&amp;rsquo;re going to create a new prefix. As usual, we need to find within the Netbox API docs the required app and endpoint for this  - the method, as we know already, is going to be create().&lt;/p&gt;
&lt;p&gt;We also need to know the required fields to create a new prefix - again Netbox API docs come to the rescue:&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/create_prefix.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/create_prefix_hu5da9dbca571e253fb0d0355c0a68ee55_165456_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/create_prefix_hu5da9dbca571e253fb0d0355c0a68ee55_165456_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/images/create_prefix_hu5da9dbca571e253fb0d0355c0a68ee55_165456_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;p&gt;As we can see, the only &amp;ldquo;must&amp;rdquo; is the actual prefix, so let&amp;rsquo;s create it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;74&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/2/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209391Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209406Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;ve noticed, I saved the output of the object creation into a variable, and that&amp;rsquo;s because the output is not a simple &amp;lsquo;OK&amp;rsquo; but an object containing all the information pertaining to the prefix as it was created: most of the stuff is set to &amp;lsquo;None&amp;rsquo; due to us not configuring it previously.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;save-method&#34;&gt;
        save() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#save-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor save() method&#34; href=&#34;#save-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s leverage the &amp;ldquo;create_prefix&amp;rdquo; variable from the previous method and update the prefix with some extra info - this was the reason for saving it into a variable. Keep in mind that the values we can use are always determined by the API docs, for instance for the VLAN, it asks for an integer (unique identifier you can find using get), so you can&amp;rsquo;t just use the VLAN name. Let&amp;rsquo;s try to add a VLAN to this prefix.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the unique identifier for this VLAN, as we can see in the dictionary below, we have &amp;lsquo;id&amp;rsquo; and &amp;lsquo;vid&amp;rsquo;, we&amp;rsquo;re after the former:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vlans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/vlans/1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN (100)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T22:09:27.721598Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T22:09:27.722169Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix_count&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;91&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vlans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;91&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Let&amp;rsquo;s add it to our prefix and check the status of the prefix object:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;92&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vlan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;93&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;93&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/2/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209391Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209406Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re not done just yet as the changes to the prefix object have been made locally, we need to push them to Netbox. Coincidentally, this is exactly what the save() method does.&lt;/p&gt;
&lt;p&gt;Time to push the changes then:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;94&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;94&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lsquo;True&amp;rsquo; means that the changes were made correctly, let&amp;rsquo;s verify so using get() - by now you&amp;rsquo;ve probably grasped how important get() is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/2/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/vlans/1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN (100)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209391Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T22:22:48.975930Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice, looks like it got configured correctly after all! Let&amp;rsquo;s update a couple more things just for fun:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Management Network Prefix AGG&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;site&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/2/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Management Network Prefix AGG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209391Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209406Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One more check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/2/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10.0.0.0/8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/dcim/sites/1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;US East&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;US East&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;us-east&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/vlans/1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN (100)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MGMT_VLAN&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Management Network Prefix AGG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T21:57:20.209391Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-03T22:26:25.137157Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;update-method&#34;&gt;
        update() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#update-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor update() method&#34; href=&#34;#update-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;This method is a combination of all the steps in the previous method in one step. You create a dictionary with the specific things you want to update, call this method, and it directly pushes the changes to Netbox.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at current state of the prefix we want to modify:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;122&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefix_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/4/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-04T15:20:45.245603Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-04T15:20:45.245692Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s say we want to update its description and site details, so we create a dictionary with that info and pass it as an argument to the update() method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;124&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefix_2_changes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Office Networks AGG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefix_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix_2_changes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see the changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;126&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;126&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/ipam/prefixes/4/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;IPv4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost:8000/api/dcim/sites/1/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;US East&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;US East&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;us-east&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vrf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tenant&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vlan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Active&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mark_utilized&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Office Networks AGG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_fields&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-04T15:20:45.245603Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;last_updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2022-08-04T15:23:27.494298Z&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;_depth&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h5 id=&#34;delete-method&#34;&gt;
        delete() method
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#delete-method&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor delete() method&#34; href=&#34;#delete-method&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h5&gt;
&lt;/div&gt;
&lt;p&gt;Finally, let&amp;rsquo;s delete the prefix:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefix_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Is it gone?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;129&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;nb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefixes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;172.16.0.0/16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;In&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;130&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is indeed!&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;conclusion&#34;&gt;
        Conclusion
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#conclusion&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Conclusion&#34; href=&#34;#conclusion&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;In this post we&amp;rsquo;ve covered what I belive are the most important features of Pynetbox. Hopefully by now you should be able to know enough to start doing some useful things. In an upcoming post, I&amp;rsquo;ll cover an end-to-end real automation use case leveraging what we&amp;rsquo;ve seen here.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;further-reading&#34;&gt;
        Further Reading
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/netbox-automation-using-pynetbox/#further-reading&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Further Reading&#34; href=&#34;#further-reading&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://pynetbox.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;https://pynetbox.readthedocs.io/en/latest/&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/netbox-community/pynetbox&#34; target=&#34;_blank&#34;&gt;https://github.com/netbox-community/pynetbox&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://ttl255.com/pynetbox-netbox-python-api-client-p1-getting-info/&#34; target=&#34;_blank&#34;&gt;https://ttl255.com/pynetbox-netbox-python-api-client-p1-getting-info/&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;We will still need to deal with the API documentation to understand the specific API calls we want to make as the Pynetbox library uses the same structure as the Netbox API.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&amp;rsquo;nb&amp;rsquo; is just a variable name, in reality you can name it however you want.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
            </content>  
                                <category scheme="https://iserghini.github.io/authors/Ismael" term="Ismael" label="Ismael" /> 
        </entry>
        <entry>
            <title>Building a Netbox Docker instance and exploring its API</title>
            <link href="https://iserghini.github.io/posts/docker-netbox-and-api/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://iserghini.github.io/posts/docker-netbox-and-api/</id>
                    <author>
                        <name>Ismael</name>
                    </author>
            <published>2022-07-25T00:00:00+00:00</published>
            <updated>2022-07-25T00:00:00+00:00</updated>
            <content type="html">
                &lt;p&gt;In this post, I&amp;rsquo;m going to walk you through the installation of the dockerized version of Netbox from the very beginning
until having a working instance, exploring its REST API using Insomnia (similar to Postman but with support for SOCKS
proxy), and finally using Python to make API calls.&lt;/p&gt;
  &lt;div class=&#34;gblog-toc gblog-toc__level--6&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#building-a-netbox-docker-instance&#34;&gt;Building a Netbox Docker instance&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#netbox-device-type-library-and-netbox-device-type-library-import&#34;&gt;NetBox Device Type Library and Netbox Device Type Library Import&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#exploring-the-netbox-rest-api&#34;&gt;Exploring the Netbox REST API&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#api-calls-using-python&#34;&gt;API calls using Python&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
    &lt;hr /&gt;
  &lt;/div&gt;


&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;prerequisites&#34;&gt;
        Prerequisites
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#prerequisites&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Prerequisites&#34; href=&#34;#prerequisites&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Before going any further, you need to make sure you have Docker Engine and Docker Compose installed.
For this tutorial, I&amp;rsquo;m going to use Ubuntu 20.04. If you don&amp;rsquo;t have them installed, please follow the steps indicated
here 
&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/#installation-methods&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/engine/install/ubuntu/#installation-methods&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s confirm we have everything we need:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab-server:~$ sudo docker run hello-world
Unable to find image &amp;#39;hello-world:latest&amp;#39; locally
latest: Pulling from library/hello-world
2db29710123e: Pull complete 
Digest: sha256:53f1bbee2f52c39e41682ee1d388285290c5c8a76cc92b42687eecf38e0af3f0
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;#34;hello-world&amp;#34; image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
 
lab-server:~$ docker compose version
Docker Compose version v2.6.0 
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;building-a-netbox-docker-instance&#34;&gt;
        Building a Netbox Docker instance
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#building-a-netbox-docker-instance&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Building a Netbox Docker instance&#34; href=&#34;#building-a-netbox-docker-instance&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Thanks to the fantastic job the maintainers of Netbox Docker have done, the installation is really easy. We just need to
follow the steps 
&lt;a href=&#34;https://github.com/netbox-community/netbox-docker&#34; target=&#34;_blank&#34;&gt;here,&lt;/a&gt;

 which come down to, copying the below in
our console&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone -b release https://github.com/netbox-community/netbox-docker.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; netbox-docker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tee docker compose.override.yml &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;version: &amp;#39;3.4&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  netbox:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    ports:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      - 8000:8080
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo docker compose pull
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo docker compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What the above does is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the git repository for Netbox Docker in our local directory.&lt;/li&gt;
&lt;li&gt;Create a docker-compose YAML file.&lt;/li&gt;
&lt;li&gt;Spin up all the Netbox docker containers (database, cache, GUI&amp;hellip;).&lt;/li&gt;
&lt;li&gt;Make Netbox accessible at 
&lt;a href=&#34;http://0.0.0.0:8000&#34; target=&#34;_blank&#34;&gt;http://0.0.0.0:8000&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If everything went well, we should see the following containers running:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab-server:~$ sudo docker compose ps
NAME                                  COMMAND                  SERVICE               STATUS              PORTS
netbox-docker-netbox-1                &amp;#34;/usr/bin/tini -- /o…&amp;#34;   netbox                running             0.0.0.0:8000-&amp;gt;8080/tcp, :::8000-&amp;gt;8080/tcp
netbox-docker-netbox-housekeeping-1   &amp;#34;/usr/bin/tini -- /o…&amp;#34;   netbox-housekeeping   running             
netbox-docker-netbox-worker-1         &amp;#34;/usr/bin/tini -- /o…&amp;#34;   netbox-worker         running             
netbox-docker-postgres-1              &amp;#34;docker-entrypoint.s…&amp;#34;   postgres              running             5432/tcp
netbox-docker-redis-1                 &amp;#34;docker-entrypoint.s…&amp;#34;   redis                 running             6379/tcp
netbox-docker-redis-cache-1           &amp;#34;docker-entrypoint.s…&amp;#34;   redis-cache           running             6379/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And after a couple of minutes, we should be able to reach the GUI too. However, before going any further, it&amp;rsquo;d be good
to verify our installation by running NetBox&amp;rsquo;s unit tests to ensure that the installation finished correctly.&lt;/p&gt;
&lt;p&gt;We run the below script&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; within the same folder we run the previous commands - keep in mind that it&amp;rsquo;ll take a few
minutes to finish:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;IMAGE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;netboxcommunity/netbox:latest ./test.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last few lines will look as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...output trimmed...
🧬 loaded config &amp;#39;/etc/netbox/config/configuration.py&amp;#39;
🧬 loaded config &amp;#39;/etc/netbox/config/extra.py&amp;#39;
🧬 loaded config &amp;#39;/etc/netbox/config/logging.py&amp;#39;
🧬 loaded config &amp;#39;/etc/netbox/config/plugins.py&amp;#39;
System check identified no issues (0 silenced).
🐳🐳🐳 Done testing &amp;#39;netboxcommunity/netbox:latest&amp;#39;
💣 Cleaning Up
[+] Running 5/5
 ⠿ Container netbox_docker_test_-redis-1          Removed                                                                                                              0.5s
 ⠿ Container netbox_docker_test_-redis-cache-1    Removed                                                                                                              0.6s
 ⠿ Container netbox_docker_test_-postgres-1       Removed                                                                                                              0.7s
 ⠿ Volume netbox_docker_test__netbox-media-files  Removed                                                                                                              0.0s
 ⠿ Network netbox_docker_test__default            Removed                                                                                                              0.2s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice, now we have a fully capable dockerized Netbox testing instance. The default creds shipped with it are:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Username: admin
Password: admin
API Token: 0123456789abcdef0123456789abcdef01234567
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, let&amp;rsquo;s confirm that we can log in:&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_login.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_login_hu69273864db835c6e3625f46a441f0b79_166754_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_login_hu69273864db835c6e3625f46a441f0b79_166754_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_login_hu69273864db835c6e3625f46a441f0b79_166754_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;






&lt;blockquote class=&#34;gblog-hint tip&#34;&gt;
  &lt;div class=&#34;gblog-hint__title flex align-center&#34;&gt;&lt;i class=&#34;fa tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;&lt;/div&gt;
  &lt;div class=&#34;gblog-hint__text&#34;&gt;&lt;p&gt;If you&amp;rsquo;re running this container in a remote server, like I am, you can access the GUI by configuring a SOCKS proxy
using your web browser and connecting to your remote server using SSH with the application-level port forwarding argument.&lt;/p&gt;
&lt;p&gt;Firefox SOCKSv5 config:&lt;/p&gt;
  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/socks_proxy.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/socks_proxy_hud8e7ecd1d1bced0bc27b0caca1d83671_46575_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/docker-netbox-and-api/images/socks_proxy_hud8e7ecd1d1bced0bc27b0caca1d83671_46575_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/socks_proxy_hud8e7ecd1d1bced0bc27b0caca1d83671_46575_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;
&lt;p&gt;SSH application-level port forwarding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -D &lt;span class=&#34;m&#34;&gt;3001&lt;/span&gt; lab@192.168.1.120 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 3001 is a random port, you can use any other.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;netbox-device-type-library-and-netbox-device-type-library-import&#34;&gt;
        NetBox Device Type Library and Netbox Device Type Library Import
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#netbox-device-type-library-and-netbox-device-type-library-import&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor NetBox Device Type Library and Netbox Device Type Library Import&#34; href=&#34;#netbox-device-type-library-and-netbox-device-type-library-import&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Before we start exploring the Netbox API. Let&amp;rsquo;s take a look at the 
&lt;a href=&#34;https://github.com/netbox-community/devicetype-library&#34; target=&#34;_blank&#34;&gt;Device Type Library.&lt;/a&gt;


By default, Netbox ships with no device types - as can be seen in the previous Netbox home screenshot.
This library provides us with many device types and components ready to import into our Netbox instance so that we
don&amp;rsquo;t have to define them manually.
You can find a full list of supported devices 
&lt;a href=&#34;https://github.com/netbox-community/devicetype-library/tree/master/device-types&#34; target=&#34;_blank&#34;&gt;here.&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Whilst this library is very useful as we no longer need to create a YAML file defining the number of interfaces our device
has, interface names,&amp;hellip;we still need to import the devices manually into Netbox. Here&amp;rsquo;s where the

&lt;a href=&#34;https://github.com/minitriga/Netbox-Device-Type-Library-Import&#34; target=&#34;_blank&#34;&gt;Device-Type-Library-Import&lt;/a&gt;

 project comes in handy.
This is a script that allows us to import all the devices from the official Netbox Device Type Library programmatically -
it also allows for some customisation such as importing specific vendors only. Time to use it then!&lt;/p&gt;
&lt;p&gt;Clone the git repo, create a Python venv and install the required libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/minitriga/Netbox-Device-Type-Library-Import 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; Netbox-Device-Type-Library-Import
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 -m venv venv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the .env file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tee .env &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;NETBOX_URL=http://0.0.0.0:8000/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;NETBOX_TOKEN=0123456789abcdef0123456789abcdef01234567
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;REPO_URL=https://github.com/netbox-community/devicetype-library.git
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;REPO_BRANCH=master
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;IGNORE_SSL_ERRORS=True
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the script to create all vendors and device types, keep in mind this will take around 20 mins, alternatively you
can specify the vendor by using the &amp;ldquo;&amp;ndash;vendors&amp;rdquo; argument, for instance &amp;ldquo;&amp;ndash;vendors juniper&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./nb-dt-import.py 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the script is done, you should see something like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(venv) lab-server:~$ ./nb-dt-import.py 
Package Installed https://github.com/netbox-community/devicetype-library.git
No Vendors Specified, Gathering All Device-Types
82 Vendors Found
1778 Device-Types Found
...output trimmed...
---
Script took 0:19:48.428980 to run
1760 devices created
43218 interfaces/ports updated
82 manufacturers created
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;exploring-the-netbox-rest-api&#34;&gt;
        Exploring the Netbox REST API
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#exploring-the-netbox-rest-api&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Exploring the Netbox REST API&#34; href=&#34;#exploring-the-netbox-rest-api&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;To access the API documentation we go to 
&lt;a href=&#34;http://0.0.0.0:8000/api/docs&#34; target=&#34;_blank&#34;&gt;http://0.0.0.0:8000/api/docs.&lt;/a&gt;


Here, we find all the paths available and what type of data we get from each one of them.



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_api_overview.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_api_overview_hu32c1c99650effc07eaed586244883803_195834_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_api_overview_hu32c1c99650effc07eaed586244883803_195834_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/netbox_api_overview_hu32c1c99650effc07eaed586244883803_195834_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;This documentation is of utmost importance, without it we don&amp;rsquo;t know which paths we need to use to query what data. The
path needs to be appended like this 
&lt;a href=&#34;&#34;&gt;http://0.0.0.0:8000/api/{path}.&lt;/a&gt;

 to form the full URL we&amp;rsquo;ll need to use when
making our API calls.&lt;/p&gt;
&lt;p&gt;Time for a practical example, let&amp;rsquo;s try to gather the current manufacturers (vendors) existing in our Netbox instance.
Generally, the process would be as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the API documentation as per above 
&lt;a href=&#34;http://0.0.0.0:8000/api/docs&#34; target=&#34;_blank&#34;&gt;http://0.0.0.0:8000/api/docs.&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;Find the path required for what we&amp;rsquo;re trying to do&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, for this example &amp;lsquo;manufacturers&amp;rsquo;:



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/manufacturers.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/manufacturers_hu040318293226046126da8eee88a5093a_196662_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/docker-netbox-and-api/images/manufacturers_hu040318293226046126da8eee88a5093a_196662_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/manufacturers_hu040318293226046126da8eee88a5093a_196662_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Open the GET entry and explore the parameters required - for this particular query there is no mandatory parameter
required (they&amp;rsquo;re marked with a red asterisk).&lt;/li&gt;
&lt;li&gt;Open your API client of choice, I&amp;rsquo;m going to use Insomnia.&lt;/li&gt;
&lt;li&gt;Our URL will be 
&lt;a href=&#34;http://0.0.0.0:8000/api/dcim/manufacturers/&#34; target=&#34;_blank&#34;&gt;http://0.0.0.0:8000/api/dcim/manufacturers/&lt;/a&gt;

 and the
HTTP method GET&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Craft the request in Insomnia as per the screenshot below. You need:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Headers:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Authorization: Token 0123456789abcdef0123456789abcdef01234567
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Method GET, URL:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://0.0.0.0:8000/api/dcim/manufacturers/
&lt;/code&gt;&lt;/pre&gt;


  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_manufacturers.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_manufacturers_hub0fe61d3bc12fd338642267a9f5f4493_1186641_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_manufacturers_hub0fe61d3bc12fd338642267a9f5f4493_1186641_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_manufacturers_hub0fe61d3bc12fd338642267a9f5f4493_1186641_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;






&lt;blockquote class=&#34;gblog-hint tip&#34;&gt;
  &lt;div class=&#34;gblog-hint__title flex align-center&#34;&gt;&lt;i class=&#34;fa tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;&lt;/div&gt;
  &lt;div class=&#34;gblog-hint__text&#34;&gt;&lt;p&gt;As before, If you&amp;rsquo;re running this container on a remote server you&amp;rsquo;d need to add the following config to Insomnia,
in addition to the same SSH command as before.&lt;/p&gt;
  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_socks_proxy.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_socks_proxy_huc8f1631a255a2cf23914213b6455d655_1932229_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_socks_proxy_huc8f1631a255a2cf23914213b6455d655_1932229_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/images/insomnia_socks_proxy_huc8f1631a255a2cf23914213b6455d655_1932229_1800x0_resize_box_3.png&#34;
            alt=&#34;&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
    &lt;/figure&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also do the same as above using cURL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Ismaels-MacBook-Air:~&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;ismael$&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;--proxy&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;socks&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;h:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//localhost:3001 &amp;#34;http://0.0.0.0:8000/api/dcim/manufacturers/&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;--header&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authorization: Token 0123456789abcdef0123456789abcdef01234567&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;json_pp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;err&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Total&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Received&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Xferd&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;Average&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Speed&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;Time&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;Time&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;Time&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;Current&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                 &lt;span class=&#34;err&#34;&gt;Dload&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;Upload&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;Total&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;Spent&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;Left&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;Speed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15797&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15797&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;97658&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;--:--:--&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;--:--:--&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;--:--:--&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;107&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nt&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;82&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nt&#34;&gt;&amp;#34;next&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://0.0.0.0:8000/api/dcim/manufacturers/?limit=50&amp;amp;offset=50&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nt&#34;&gt;&amp;#34;previous&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nt&#34;&gt;&amp;#34;results&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-07-28T06:20:02.743921Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;custom_fields&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;devicetype_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3Com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;inventoryitem_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;last_updated&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-07-28T06:20:02.743940Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3Com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;platform_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;slug&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://0.0.0.0:8000/api/dcim/manufacturers/26/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-07-28T06:20:02.625086Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;custom_fields&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;devicetype_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A10&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;inventoryitem_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;last_updated&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-07-28T06:20:02.625104Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A10&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;platform_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;slug&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;a10&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://0.0.0.0:8000/api/dcim/manufacturers/19/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-07-28T06:20:02.386448Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;custom_fields&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;devicetype_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;APC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;inventoryitem_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;last_updated&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-07-28T06:20:02.386467Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;APC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;platform_count&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;slug&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;apc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://0.0.0.0:8000/api/dcim/manufacturers/5/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...output&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;trimmed...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;blockquote class=&#34;gblog-hint note&#34;&gt;
  &lt;div class=&#34;gblog-hint__title flex align-center&#34;&gt;&lt;i class=&#34;fa note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;&lt;/div&gt;
  &lt;div class=&#34;gblog-hint__text&#34;&gt;If you can access Netbox without needing a proxy, remove the &amp;ldquo;&amp;ndash;proxy socks5h://localhost:3001&amp;rdquo; argument.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;api-calls-using-python&#34;&gt;
        API calls using Python
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#api-calls-using-python&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor API calls using Python&#34; href=&#34;#api-calls-using-python&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;API clients such as Insomnia or Postman and CLI programs like cURL are handy tools when trying to learn how the Netbox
API is structured or how Netbox presents the data in response to different API calls. However, if we want to work with
that data to extract useful information, take various actions based on that data and so on, we need to go a step further
and use a programming language, here I&amp;rsquo;m going to use Python with the 
&lt;a href=&#34;https://requests.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34;&gt;Requests&lt;/a&gt;

 library.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s try the same example as above but this time, making the request more specific: manufacturers whose name is &amp;ldquo;Fortinet&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pprint&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pprint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Token 0123456789abcdef0123456789abcdef01234567&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;netbox_api_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://0.0.0.0:8000/api&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;full_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;netbox_api_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/dcim/manufacturers/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Fortinet&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;full_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# .json () provides the API&amp;#39;s response in JSON format ; .txt in clear text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;count&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;1,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;next&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;None,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;previous&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;None,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;results&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[{&amp;#39;created&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;2022-07-28T06:20:03.509530Z&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;custom_fields&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;description&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;devicetype_count&amp;#39;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;display&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;Fortinet&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;id&amp;#39;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;71&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;inventoryitem_count&amp;#39;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;last_updated&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2022-07-28&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.509550&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Z&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;name&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;Fortinet&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;platform_count&amp;#39;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;slug&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;fortinet&amp;#39;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;tags&amp;#39;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;err&#34;&gt;&amp;#39;url&amp;#39;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;http:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//0.0.0.0:9000/api/dcim/manufacturers/71/&amp;#39;}]}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the magic about using Python, the Netbox API response to our API call is a Python dictionary, which means we can
very easily extract whatever information we want and do whatever we want with it.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;conclusion&#34;&gt;
        Conclusion
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#conclusion&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Conclusion&#34; href=&#34;#conclusion&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve just scratched the surface of the power of the Netbox API, in the future I&amp;rsquo;m planning to go in much more depth by
exploring how to create and rack devices, prefixes, VLANs, and much more!&lt;br&gt;
The key areas to keep in mind when making API calls are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding the specific path required for whatever data we&amp;rsquo;re trying to get: see the (
&lt;a href=&#34;http://0.0.0.0:8000/api/docs/&#34; target=&#34;_blank&#34;&gt;API documentation&lt;/a&gt;

)&lt;/li&gt;
&lt;li&gt;Finding the parameters required for the specific query, sometimes you&amp;rsquo;d want to use parameters to filter the output (for example,
you want to find a specific device filtering on its name as opposed to asking Netbox to give you all devices), other times
the query in question will force you to provide those parameters (for example, in creating a device, you must provide its name,
device_type, device_role,..) - again all this info is in the API documentation.&lt;/li&gt;
&lt;li&gt;The type of HTTP method to use - this depends on what you&amp;rsquo;re trying to do (GET for getting info, DELETE for deleting&lt;/li&gt;
&lt;li&gt;it, POST for adding it, and so on).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you understand the above, you can make full use of the Netbox API. Then you&amp;rsquo;d need a bit of Python knowledge to know
how to extract the data from the dictionaries and make use of it.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;further-reading&#34;&gt;
        Further Reading
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/docker-netbox-and-api/#further-reading&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Further Reading&#34; href=&#34;#further-reading&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9110&#34; target=&#34;_blank&#34;&gt;https://datatracker.ietf.org/doc/html/rfc9110&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.netbox.dev/en/stable/rest-api/overview/&#34; target=&#34;_blank&#34;&gt;https://docs.netbox.dev/en/stable/rest-api/overview/&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://reqbin.com/req/c-ea0d5rlb/curl-send-header-example&#34; target=&#34;_blank&#34;&gt;https://reqbin.com/req/c-ea0d5rlb/curl-send-header-example&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://learning.oreilly.com/library/view/network-programmability-and/9780135183762/xhtml/ch07.xhtml#ch07&#34; target=&#34;_blank&#34;&gt;https://learning.oreilly.com/library/view/network-programmability-and/9780135183762/xhtml/ch07.xhtml#ch07&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://learning.oreilly.com/library/view/network-programmability-and/9781491931240/ch07.html&#34; target=&#34;_blank&#34;&gt;https://learning.oreilly.com/library/view/network-programmability-and/9781491931240/ch07.html&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I&amp;rsquo;ve changed the original syntax to use the new &amp;ldquo;Compose V2&amp;rdquo; syntax (&amp;ldquo;docker compose&amp;rdquo; instead of &amp;ldquo;docker-compose&amp;rdquo; - see

&lt;a href=&#34;https://docs.docker.com/compose/&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;

 for details. I have also added &amp;ldquo;sudo&amp;rdquo; for running the docker commands. And finally,
added the &amp;ldquo;-d&amp;rdquo; option to the last command so that it runs in the background.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;I&amp;rsquo;ve modified the script so that it uses &amp;ldquo;docker compose&amp;rdquo; as opposed to &amp;ldquo;docker-compose&amp;rdquo;. For now, you can still
use docker-compose, however, keep in mind that it&amp;rsquo;s discontinued now.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&amp;lsquo;control + f&amp;rsquo; for searching in the browser should do the trick.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;You can copy this URL in your browser and will give you the same output - this is handy for a quick test to make
sure you got the right URL for the API call.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
            </content>  
                                <category scheme="https://iserghini.github.io/authors/Ismael" term="Ismael" label="Ismael" /> 
        </entry>
        <entry>
            <title>Getting started with Network Automation using Vagrant &#43; Libvirt</title>
            <link href="https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/</id>
                    <author>
                        <name>Ismael</name>
                    </author>
            <published>2022-07-20T00:00:00+00:00</published>
            <updated>2022-07-20T00:00:00+00:00</updated>
            <content type="html">
                &lt;p&gt;In this post, I&amp;rsquo;m going to walk you through how to set up an environment that can be used for testing what&amp;rsquo;s been called
these days &amp;ldquo;Cloud Native Data Centers&amp;rdquo;, including underlay/overlay protocols, network automation scripts, zero-touch
provisioning, monitoring, observability amongst many other things.&lt;/p&gt;
&lt;p&gt;In order to build this, we&amp;rsquo;re going to use Vagrant combined with Libvirt, which uses KVM as the hypervisor.
I&amp;rsquo;ve chosen Libvirt over Virtualbox due to its better scalability and portability beyond running some small tests in
your home PC&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. You don&amp;rsquo;t normally see Virtualbox in Linux servers, but you do see KVM.&lt;/p&gt;
&lt;p&gt;The great think about Vagrant is that it uses text files to describe the entire network topology, this allows us
to use git for version control and to automate the creation of the test environment - no need to waste time
pointing and clicking in a GUI.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a bit of a learning curve understanding the text file that Vagrant uses to describe the topology (called
Vagrantfile). Hopefully, after you read this blog post, you will be able to create you own topologies without any issues.&lt;/p&gt;
  &lt;div class=&#34;gblog-toc gblog-toc__level--6&#34;&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#network-topology&#34;&gt;Network Topology&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#os-versions&#34;&gt;OS versions&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#management-ip-addressing&#34;&gt;Management IP Addressing&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#installing-vagrant-and-libvirt-plugging2&#34;&gt;Installing Vagrant and Libvirt plugging&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#building-vagrantfile&#34;&gt;Building &amp;lsquo;Vagrantfile&amp;rsquo;&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#how-to-model-a-device&#34;&gt;How to model a device&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#how-to-model-a-p2p-link&#34;&gt;How to model a P2P link&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#how-to-preconfigure-devices&#34;&gt;How to preconfigure devices&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#final-vagrantfile-modelling-our-full-network-topology&#34;&gt;Final Vagrantfile modelling our full network topology&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#running-vagrant-up&#34;&gt;Running &amp;lsquo;vagrant up&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#further-reading&#34;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
    &lt;hr /&gt;
  &lt;/div&gt;


&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;network-topology&#34;&gt;
        Network Topology
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#network-topology&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Network Topology&#34; href=&#34;#network-topology&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;re going to build the following 3-stage Clos topology made up of two spines, four leaves, and two servers.
Additionally, we have an out-of-band management network (purple) where all devices are connected to via their management
interfaces through a Libvirt virtual bridge. Lastly, we have a mgmt-server connected to the virtual bridge only.&lt;/p&gt;



  &lt;div class=&#34;flex justify-center&#34;&gt;
    &lt;figure
      class=&#34;gblog-post__figure&#34;
    &gt;
      &lt;a class=&#34;gblog-markdown__link--raw&#34; href=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/images/base_topology.png&#34;&gt;
        &lt;picture&gt;
          &lt;source
              srcset=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/images/base_topology_hu586e40d742ed2334896b479f205077e7_5187024_600x0_resize_box_3.png 600w, https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/images/base_topology_hu586e40d742ed2334896b479f205077e7_5187024_1200x0_resize_box_3.png 1200w&#34; sizes=&#34;100vw&#34;
          /&gt;
          &lt;img
            src=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/images/base_topology_hu586e40d742ed2334896b479f205077e7_5187024_1800x0_resize_box_3.png&#34;
            alt=&#34;3-stage Clos Network&#34;
          /&gt;
        &lt;/picture&gt;
      &lt;/a&gt;
          &lt;figcaption&gt;
            3-stage Clos Network
          &lt;/figcaption&gt;
    &lt;/figure&gt;
  &lt;/div&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;os-versions&#34;&gt;
        OS versions
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#os-versions&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor OS versions&#34; href=&#34;#os-versions&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;Switches: Cumulus VX 3.7.15&lt;br&gt;
Servers: Ubuntu 20.04&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;management-ip-addressing&#34;&gt;
        Management IP Addressing
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#management-ip-addressing&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Management IP Addressing&#34; href=&#34;#management-ip-addressing&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;Assigned all via DHCP. The MGMT network has been configured explicitly in the Vagranfile to be 172.16.100.0/24.&lt;/p&gt;
&lt;p&gt;The assigned DHCP allocations can bee seen running the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;virsh net-dhcp-leases vagrant-libvirt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&amp;rsquo;re not using the default vagrant-libvirt network, then you need to change the name there.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;installing-vagrant-and-libvirt-plugging2&#34;&gt;
        Installing Vagrant and Libvirt plugging&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#installing-vagrant-and-libvirt-plugging2&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Installing Vagrant and Libvirt plugging2&#34; href=&#34;#installing-vagrant-and-libvirt-plugging2&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;After spending a lot of time trying to figure out how to make the libvirt plugin work with Vagrant (there seems to be
tons of problems due to different versions being used) I&amp;rsquo;ve figured out that if you just run this script, it all works immediately:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt-qa/blob/main/scripts/install.bash&#34; target=&#34;_blank&#34;&gt;https://github.com/vagrant-libvirt/vagrant-libvirt-qa/blob/main/scripts/install.bash&lt;/a&gt;

&lt;/p&gt;

&lt;div class=&#34;gblog-expand&#34;&gt;
  &lt;label class=&#34;gblog-expand__head flex justify-between&#34; for=&#34;ae1dfaec-2&#34;&gt;
    &lt;span&gt;Click to see the above script - to run it: &amp;#39;bash install.bash&amp;#39;&lt;/span&gt;
    &lt;span&gt;...&lt;/span&gt;
  &lt;/label&gt;
  &lt;input id=&#34;ae1dfaec-2&#34; type=&#34;checkbox&#34; class=&#34;gblog-expand__control hidden&#34; /&gt;
  &lt;div class=&#34;gblog-markdown--nested gblog-expand__content&#34;&gt;
    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

set -o errexit -o pipefail -o noclobber -o nounset

DPKG_OPTS=(
    -o Dpkg::Options::=&amp;#34;--force-confold&amp;#34;
)
VAGRANT_LIBVIRT_VERSION=${VAGRANT_LIBVIRT_VERSION:-&amp;#34;latest&amp;#34;}

function restart_libvirt() {
    service_name=${1:-libvirtd}
    # it appears there can be issues with libvirt being started before certain
    # packages that are required for create behaviour on first run. Restart to
    # ensure the daemon picks up the latest environment and can create a VM
    # on the first attempt. Otherwise will need to reboot
    sudo systemctl restart ${service_name}
}

function setup_apt() {
    export DEBIAN_FRONTEND=noninteractive
    export DEBCONF_NONINTERACTIVE_SEEN=true

    sudo sed -i &amp;#34;s/# deb-src/deb-src/&amp;#34; /etc/apt/sources.list
    sudo -E apt-get update
    sudo -E apt-get -y &amp;#34;${DPKG_OPTS[@]}&amp;#34; upgrade
    sudo -E apt-get -y build-dep vagrant ruby-libvirt
}

function setup_arch() {
    sudo pacman -Suyu --noconfirm --noprogressbar
    sudo pacman -Qs &amp;#39;iptables&amp;#39; | grep &amp;#34;local&amp;#34; | grep &amp;#34;iptables &amp;#34; &amp;amp;&amp;amp; sudo pacman -Rd --nodeps --noconfirm iptables
    # need to remove iptables to allow ebtables to be installed
    sudo pacman -S --needed --noprogressbar --noconfirm  \
        autoconf \
        automake \
        binutils \
        bridge-utils \
        dnsmasq \
        git \
        gcc \
        iptables-nft \
        libvirt \
        libxml2 \
        libxslt \
        make \
        openbsd-netcat \
        pkg-config \
        qemu \
        ruby \
        wget \
        ;
    sudo systemctl enable --now libvirtd
}

function setup_centos_7() {
    sudo yum -y update
    sudo yum -y install centos-release-qemu-ev
    sudo yum -y update
    sudo yum -y install \
        autoconf \
        automake \
        binutils \
        cmake \
        gcc \
        git \
        libguestfs-tools \
        libvirt \
        libvirt-devel \
        make \
        qemu \
        qemu-kvm-ev \
        ruby-devel \
        wget \
        ;
    restart_libvirt
}

function setup_centos() {
    sudo dnf -y update
    sudo dnf -y install \
        @virt \
        autoconf \
        automake \
        binutils \
        byacc \
        cmake \
        gcc \
        gcc-c++ \
        git \
        libguestfs-tools \
        libvirt \
        libvirt-devel \
        make \
        qemu-kvm \
        rpm-build \
        ruby-devel \
        wget \
        zlib-devel \
        ;
    restart_libvirt
}

function setup_debian() {
    setup_apt
    sudo -E apt-get -y &amp;#34;${DPKG_OPTS[@]}&amp;#34; install \
        dnsmasq \
        ebtables \
        git \
        libvirt-clients \
        libvirt-daemon \
        libvirt-daemon-system \
        qemu \
        qemu-system-x86 \
        qemu-utils \
        wget \
        ;
    restart_libvirt
}

function setup_fedora() {
    sudo dnf -y update
    sudo dnf -y install \
        @virtualization \
        autoconf \
        automake \
        binutils \
        byacc \
        cmake \
        gcc \
        gcc-c++ \
        git \
        libguestfs-tools \
        libvirt-devel \
        make \
        wget \
        zlib-devel \
        ;
    restart_libvirt
}

function setup_ubuntu_1804() {
    setup_apt
    sudo -E apt-get -y &amp;#34;${DPKG_OPTS[@]}&amp;#34; install \
        git \
        libvirt-bin \
        qemu \
        wget \
        ;
    restart_libvirt
}

function setup_ubuntu() {
    setup_apt
    sudo -E apt-get -y &amp;#34;${DPKG_OPTS[@]}&amp;#34; install \
        git \
        libvirt-clients \
        libvirt-daemon \
        libvirt-daemon-system \
        qemu \
        qemu-system-x86 \
        qemu-utils \
        wget \
        ;
    restart_libvirt
}

function setup_distro() {
    local distro=${1}
    local version=${2:-}

    if [[ -n &amp;#34;${version}&amp;#34; ]] &amp;amp;&amp;amp; [[ $(type -t setup_${distro}_${version} 2&amp;gt;/dev/null) == &amp;#39;function&amp;#39; ]]
    then
        eval setup_${distro}_${version}
    else
        eval setup_${distro}
    fi
}


function download_vagrant() {
    local version=${1}
    local pkgext=${2}
    local pkg=&amp;#34;vagrant_${1}_x86_64.${pkgext}&amp;#34;

    wget --no-verbose https://releases.hashicorp.com/vagrant/${version}/${pkg} -O /tmp/${pkg}.tmp
    mv /tmp/${pkg}.tmp /tmp/${pkg}
}

function install_rake_arch() {
    sudo pacman -S --needed --noprogressbar --noconfirm  \
        ruby-bundler \
        rake
}

function install_rake_centos() {
    sudo yum -y install \
        rubygem-bundler \
        rubygem-rake
}

function install_rake_debian() {
    sudo apt install -y \
        bundler \
        rake
}

function install_rake_fedora() {
    sudo dnf -y install \
        rubygem-rake
}

function install_rake_ubuntu() {
    install_rake_debian $@
}

function install_vagrant_arch() {
    sudo pacman -S --needed --noprogressbar --noconfirm  \
        vagrant
}

function install_vagrant_centos() {
    local version=$1

    download_vagrant ${version} rpm
    sudo -E rpm -Uh --force /tmp/vagrant_${version}_x86_64.rpm
}

function install_vagrant_debian() {
    local version=$1

    download_vagrant ${version} deb
    sudo -E dpkg -i /tmp/vagrant_${version}_x86_64.deb
}

function install_vagrant_fedora() {
    install_vagrant_centos $@
}

function install_vagrant_ubuntu() {
    install_vagrant_debian $@
}

function build_libssh() {
    local dir=${1}

    mkdir -p ${dir}-build
    pushd ${dir}-build
    cmake ${dir} -DOPENSSL_ROOT_DIR=/opt/vagrant/embedded/
    make
    sudo cp lib/libssh* /opt/vagrant/embedded/lib64
    popd
}

function build_krb5() {
    local dir=${1}

    pushd ${dir}/src
    ./configure
    make
    sudo cp -P lib/crypto/libk5crypto.* /opt/vagrant/embedded/lib64/
    popd
}

function setup_rpm_sources_centos() {
    typeset -n basedir=$1
    pkg=&amp;#34;$2&amp;#34;
    rpmname=&amp;#34;${3:-${pkg}}&amp;#34;

    [[ ! -d ${pkg} ]] &amp;amp;&amp;amp; git clone https://git.centos.org/rpms/${pkg}
    pushd ${pkg}
    nvr=$(rpm -q --queryformat &amp;#34;${pkg}-%{version}-%{release}&amp;#34; ${rpmname})
    nv=$(rpm -q --queryformat &amp;#34;${pkg}-%{version}&amp;#34; ${rpmname})
    git checkout $(git tag -l | grep &amp;#34;${nvr}\$&amp;#34; | tail -n1)
    into_srpm.sh -d c8s
    pushd BUILD
    tar xf ../SOURCES/${nv}.tar.*z

    basedir=$(realpath ${nv})
    popd
    popd
}

function patch_vagrant_centos_8() {
    mkdir -p patches
    pushd patches
    [[ ! -d centos-git-common ]] &amp;amp;&amp;amp; git clone https://git.centos.org/centos-git-common
    export PATH=$(readlink -f ./centos-git-common):$PATH
    chmod a+x ./centos-git-common/*.sh

    setup_rpm_sources_centos LIBSSH_DIR libssh
    build_libssh ${LIBSSH_DIR}

    setup_rpm_sources_centos KRB5_DIR krb5 krb5-libs
    build_krb5 ${KRB5_DIR}

    popd
}

function setup_rpm_sources_fedora() {
    typeset -n basedir=$1
    pkg=&amp;#34;$2&amp;#34;
    rpmname=&amp;#34;${3:-${pkg}}&amp;#34;

    nvr=$(rpm -q --queryformat &amp;#34;${pkg}-%{version}-%{release}&amp;#34; ${rpmname})
    nv=$(rpm -q --queryformat &amp;#34;${pkg}-%{version}&amp;#34; ${rpmname})
    mkdir -p ${pkg}
    pushd ${pkg}

    [[ ! -e ${nvr}.src.rpm ]] &amp;amp;&amp;amp; dnf download --source ${rpmname}
    rpm2cpio ${nvr}.src.rpm | cpio -imdV
    rm -rf ${nv}
    tar xf ${nv}.tar.*z

    basedir=$(realpath ${nv})
    popd
}

function patch_vagrant_fedora() {
    mkdir -p patches
    pushd patches

    setup_rpm_sources_fedora LIBSSH_DIR libssh
    build_libssh ${LIBSSH_DIR}

    setup_rpm_sources_fedora KRB5_DIR krb5 krb5-libs
    build_krb5 ${KRB5_DIR}

    popd
}

function install_vagrant() {
    local version=${1}
    local distro=${2}
    local distro_version=${3:-}

    echo &amp;#34;Installing vagrant version &amp;#39;${version}&amp;#39;&amp;#34;

    eval install_vagrant_${distro} ${version}

    if [[ -n &amp;#34;${distro_version}&amp;#34; ]] &amp;amp;&amp;amp; [[ $(type -t patch_vagrant_${distro}_${distro_version} 2&amp;gt;/dev/null) == &amp;#39;function&amp;#39; ]]
    then
        echo &amp;#34;running patch_vagrant_${distro}_${distro_version}&amp;#34;
        eval patch_vagrant_${distro}_${distro_version}
    elif [[ $(type -t patch_vagrant_${distro} 2&amp;gt;/dev/null) == &amp;#39;function&amp;#39; ]]
    then
        echo &amp;#34;running patch_vagrant_${distro}&amp;#34;
        eval patch_vagrant_${distro}
    else
        echo &amp;#34;no patch functions configured for ${distro} ${distro_version}&amp;#34;
    fi
}

function install_vagrant_libvirt() {
    local distro=${1}

    echo &amp;#34;Testing vagrant-libvirt version: &amp;#39;${VAGRANT_LIBVIRT_VERSION}&amp;#39;&amp;#34;
    if [[ &amp;#34;${VAGRANT_LIBVIRT_VERSION:0:4}&amp;#34; == &amp;#34;git-&amp;#34; ]]
    then
        eval install_rake_${distro}
        if [[ ! -d &amp;#34;./vagrant-libvirt&amp;#34; ]]
        then
            git clone https://github.com/vagrant-libvirt/vagrant-libvirt.git
        fi
        pushd vagrant-libvirt
        git checkout ${VAGRANT_LIBVIRT_VERSION#git-}
        rm -rf ./pkg
        rake build
        vagrant plugin install ./pkg/vagrant-libvirt-*.gem
        popd
    elif [[ &amp;#34;${VAGRANT_LIBVIRT_VERSION}&amp;#34; == &amp;#34;latest&amp;#34; ]]
    then
        vagrant plugin install vagrant-libvirt
    else
        vagrant plugin install vagrant-libvirt --plugin-version ${VAGRANT_LIBVIRT_VERSION}
    fi
}


OPTIONS=o
LONGOPTS=vagrant-only,vagrant-version:

# -pass arguments only via   -- &amp;#34;$@&amp;#34;   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name &amp;#34;$0&amp;#34; -- &amp;#34;$@&amp;#34;)
if [[ ${PIPESTATUS[0]} -ne 0 ]]
then
    echo &amp;#34;Invalid options provided&amp;#34;
    exit 2
fi

eval set -- &amp;#34;$PARSED&amp;#34;

VAGRANT_ONLY=0

while true; do
    case &amp;#34;$1&amp;#34; in
        -o|--vagrant-only)
            VAGRANT_ONLY=1
            shift
            ;;
        --vagrant-version)
            VAGRANT_VERSION=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo &amp;#34;Programming error&amp;#34;
            exit 3
            ;;
    esac
done

echo &amp;#34;Starting vagrant-libvirt installation script&amp;#34;

DISTRO=${DISTRO:-$(awk -F= &amp;#39;/^ID=/{print $2}&amp;#39; /etc/os-release | tr -d &amp;#39;&amp;#34;&amp;#39; | tr &amp;#39;[A-Z]&amp;#39; &amp;#39;[a-z]&amp;#39;)}
DISTRO_VERSION=${DISTRO_VERSION:-$(awk -F= &amp;#39;/^VERSION_ID/{print $2}&amp;#39; /etc/os-release | tr -d &amp;#39;&amp;#34;&amp;#39; | tr &amp;#39;[A-Z]&amp;#39; &amp;#39;[a-z]&amp;#39; | tr -d &amp;#39;.&amp;#39;)}

[[ ${VAGRANT_ONLY} -eq 0 ]] &amp;amp;&amp;amp; setup_distro ${DISTRO} ${DISTRO_VERSION}

if [[ -z ${VAGRANT_VERSION+x} ]]
then
    VAGRANT_VERSION=&amp;#34;$(
        wget -qO - https://checkpoint-api.hashicorp.com/v1/check/vagrant 2&amp;gt;/dev/null | \
            tr &amp;#39;,&amp;#39; &amp;#39;\n&amp;#39; | grep current_version | cut -d: -f2 | tr -d &amp;#39;&amp;#34;&amp;#39;
        )&amp;#34;
fi

install_vagrant ${VAGRANT_VERSION} ${DISTRO} ${DISTRO_VERSION}

[[ ${VAGRANT_ONLY} -eq 0 ]] &amp;amp;&amp;amp; install_vagrant_libvirt ${DISTRO}

echo &amp;#34;Finished vagrant-libvirt installation script&amp;#34;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once the installation is finished, let&amp;rsquo;s confirm everything works by trying to build an Ubuntu 20.04 VM.&lt;/p&gt;
&lt;p&gt;You can find all the pre-built Vagrant boxes 
&lt;a href=&#34;https://app.vagrantup.com/boxes/search&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;

 just make sure you select
libvirt as your provider - if you want to use an image not listed there, you&amp;rsquo;ll need to build it yourself.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build our first Vagrant box. Below we have the equivalent to &amp;ldquo;hello world&amp;rdquo; for Vagrant:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/clos$ vagrant init generic/ubuntu2004
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
lab@lab-HP-Z620-Workstation:~/NetworkAuto/clos$ vagrant up
Bringing machine &amp;#39;default&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
...output trimmed...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; default: Machine booted and ready!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, it created the Vagrantfile for us. Later, we&amp;rsquo;ll cover how to create this file from scratch.&lt;/p&gt;
&lt;p&gt;And here, we have our Ubuntu VM up and running:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/clos$ vagrant ssh
vagrant@ubuntu2004:~$ cat /etc/*release*  | grep VERSION
VERSION=&amp;#34;20.04.4 LTS (Focal Fossa)&amp;#34;
VERSION_ID=&amp;#34;20.04&amp;#34;
VERSION_CODENAME=focal
vagrant@ubuntu2004:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, we&amp;rsquo;ve confirmed that Vagrant is working fine with the Libvirt plugging, so let&amp;rsquo;s delete the VM:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/clos$ vagrant destroy -f
==&amp;gt; default: Removing domain...
==&amp;gt; default: Deleting the machine folder
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;building-vagrantfile&#34;&gt;
        Building &amp;lsquo;Vagrantfile&amp;rsquo;
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#building-vagrantfile&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Building &amp;lsquo;Vagrantfile&amp;rsquo;&#34; href=&#34;#building-vagrantfile&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;As mentioned, Vagrant models everything using a file called &amp;ldquo;Vagrantfile&amp;rdquo; written in Ruby. In this section,
we&amp;rsquo;re going to explore the following three individual components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How Vagrant models devices&lt;/li&gt;
&lt;li&gt;How Vagrant models P2P network links&lt;/li&gt;
&lt;li&gt;How to run scripts at build time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m going to use the link between leaf01 and server01 to describe the above components of a Vagrantfile.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;how-to-model-a-device&#34;&gt;
        How to model a device
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#how-to-model-a-device&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor How to model a device&#34; href=&#34;#how-to-model-a-device&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;First, we set the following variables:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Global Variables
SWITCH_OS = &amp;#34;CumulusCommunity/cumulus-vx&amp;#34;
SWITCH_VERSION = &amp;#34;3.7.15&amp;#34;
SERVER_OS= &amp;#34;generic/ubuntu2004&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, we define the device&amp;rsquo;s name, software and VM settings (we&amp;rsquo;re skipping the interfaces for now):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
####################################
########## leaf01 config ###########
####################################

config.vm.define &amp;#34;leaf01&amp;#34; do |device|
    device.vm.hostname = &amp;#34;leaf01&amp;#34;
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end
  
#####################################
########## server01 config ##########
#####################################

config.vm.define &amp;#34;server01&amp;#34; do |device|
    device.vm.hostname = &amp;#34;server01&amp;#34;
    device.vm.box = SERVER_OS
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The vm.synced_folder set to disable is to stop default Vagrant behaviour of sharing the project folder with the VM.
You can find more details here 
&lt;a href=&#34;https://www.vagrantup.com/docs/synced-folders&#34; target=&#34;_blank&#34;&gt;https://www.vagrantup.com/docs/synced-folders&lt;/a&gt;

.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;how-to-model-a-p2p-link&#34;&gt;
        How to model a P2P link
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#how-to-model-a-p2p-link&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor How to model a P2P link&#34; href=&#34;#how-to-model-a-p2p-link&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;Libvirt uses tunnels to represent P2P links based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protocol: TCP or UDP&lt;/li&gt;
&lt;li&gt;Source IP&lt;/li&gt;
&lt;li&gt;Destination IP&lt;/li&gt;
&lt;li&gt;Source Port&lt;/li&gt;
&lt;li&gt;Destination Port&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each link needs to be uniquely identified, therefore using different IPs with the same port numbers or vice-versa
is sufficient.&lt;br&gt;
For the sake of simplicity, I&amp;rsquo;m keeping port 9999 unchanged and using different IPs to uniquely identify the link.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;####################################
########## leaf01 config ##########
####################################

    # Link leaf01 swp3  ----&amp;gt; server01 eth1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.18&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.17&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp3&amp;#34;,
      auto_config: false


####################################
########## server01 config ##########
####################################

    # Link server01 eth1  ----&amp;gt; leaf01 swp3
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.17&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.18&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;eth1&amp;#34;,
      auto_config: false
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;how-to-preconfigure-devices&#34;&gt;
        How to preconfigure devices
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#how-to-preconfigure-devices&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor How to preconfigure devices&#34; href=&#34;#how-to-preconfigure-devices&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;Another very useful feature of Vagrant is the option of running scripts at provisioning time.
Once Vagrant builds the VM and can access it, it&amp;rsquo;ll run the scripts described in the Vagrantfile.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;####################################
########## leaf01 config ##########
####################################

device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;leaf01&amp;#34;, &amp;#34;3&amp;#34;]

####################################
########## server01 config ##########
####################################

device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;leaf01&amp;#34;, &amp;#34;3&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If your script doesn&amp;rsquo;t need arguments, you can delete the :args section.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h3 id=&#34;final-vagrantfile-modelling-our-full-network-topology&#34;&gt;
        Final Vagrantfile modelling our full network topology
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#final-vagrantfile-modelling-our-full-network-topology&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Final Vagrantfile modelling our full network topology&#34; href=&#34;#final-vagrantfile-modelling-our-full-network-topology&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;Now, it&amp;rsquo;s time to see everything put together in the final Vagranfile, but before that, let&amp;rsquo;s discuss a few things.&lt;/p&gt;
&lt;p&gt;First, how to set an env variable so that Vagrant&amp;rsquo;s default provider is change from Virtualbox to Libvirt:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Set libvirt as the default provider
ENV[&amp;#39;VAGRANT_DEFAULT_PROVIDER&amp;#39;] = &amp;#39;libvirt&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Second, in the following table I&amp;rsquo;ve put together the tunnel IP mappings we&amp;rsquo;re going to use to build the P2P links in the Vagrantfile.&lt;/p&gt;
&lt;p&gt;For the UDP ports I&amp;rsquo;m going to use the same across all links to make things easier (port 9999), only the IPs will change.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Device A&lt;/th&gt;
&lt;th&gt;Intf A&lt;/th&gt;
&lt;th&gt;IP A&lt;/th&gt;
&lt;th&gt;UDP Port A&lt;/th&gt;
&lt;th&gt;Device B&lt;/th&gt;
&lt;th&gt;Intf B&lt;/th&gt;
&lt;th&gt;IP B&lt;/th&gt;
&lt;th&gt;UDP Port B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;spine01&lt;/td&gt;
&lt;td&gt;swp1&lt;/td&gt;
&lt;td&gt;127.0.100.1&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf01&lt;/td&gt;
&lt;td&gt;swp1&lt;/td&gt;
&lt;td&gt;127.0.100.2&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine01&lt;/td&gt;
&lt;td&gt;swp2&lt;/td&gt;
&lt;td&gt;127.0.100.3&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf02&lt;/td&gt;
&lt;td&gt;swp1&lt;/td&gt;
&lt;td&gt;127.0.100.4&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine01&lt;/td&gt;
&lt;td&gt;swp3&lt;/td&gt;
&lt;td&gt;127.0.100.5&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf03&lt;/td&gt;
&lt;td&gt;swp1&lt;/td&gt;
&lt;td&gt;127.0.100.6&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine01&lt;/td&gt;
&lt;td&gt;swp4&lt;/td&gt;
&lt;td&gt;127.0.100.7&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf04&lt;/td&gt;
&lt;td&gt;swp1&lt;/td&gt;
&lt;td&gt;127.0.100.8&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine02&lt;/td&gt;
&lt;td&gt;swp1&lt;/td&gt;
&lt;td&gt;127.0.100.9&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf01&lt;/td&gt;
&lt;td&gt;swp2&lt;/td&gt;
&lt;td&gt;127.0.100.10&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine02&lt;/td&gt;
&lt;td&gt;swp2&lt;/td&gt;
&lt;td&gt;127.0.100.11&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf02&lt;/td&gt;
&lt;td&gt;swp2&lt;/td&gt;
&lt;td&gt;127.0.100.12&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine02&lt;/td&gt;
&lt;td&gt;swp3&lt;/td&gt;
&lt;td&gt;127.0.100.13&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf03&lt;/td&gt;
&lt;td&gt;swp2&lt;/td&gt;
&lt;td&gt;127.0.100.14&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spine02&lt;/td&gt;
&lt;td&gt;swp4&lt;/td&gt;
&lt;td&gt;127.0.100.15&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf04&lt;/td&gt;
&lt;td&gt;swp2&lt;/td&gt;
&lt;td&gt;127.0.100.16&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server01&lt;/td&gt;
&lt;td&gt;eth1&lt;/td&gt;
&lt;td&gt;127.0.100.17&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf01&lt;/td&gt;
&lt;td&gt;swp3&lt;/td&gt;
&lt;td&gt;127.0.100.18&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server04&lt;/td&gt;
&lt;td&gt;eth1&lt;/td&gt;
&lt;td&gt;127.0.100.19&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;td&gt;leaf04&lt;/td&gt;
&lt;td&gt;swp3&lt;/td&gt;
&lt;td&gt;127.0.100.20&lt;/td&gt;
&lt;td&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Third, the below changes:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    config.vm.provider :libvirt do |domain|
        # Change the default allowed number of interfaces from 8 to 52
        domain.nic_adapter_count = 52
        # Change the MGMT network subnet and its default name
        domain.management_network_name = &amp;#34;clos_fabric_mgmt_network&amp;#34;
        domain.management_network_address = &amp;#34;172.16.100.0/24&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, here&amp;rsquo;s the final Vagranfile:&lt;/p&gt;

&lt;div class=&#34;gblog-expand&#34;&gt;
  &lt;label class=&#34;gblog-expand__head flex justify-between&#34; for=&#34;943ee343-3&#34;&gt;
    &lt;span&gt;Click to see the full output&lt;/span&gt;
    &lt;span&gt;...&lt;/span&gt;
  &lt;/label&gt;
  &lt;input id=&#34;943ee343-3&#34; type=&#34;checkbox&#34; class=&#34;gblog-expand__control hidden&#34; /&gt;
  &lt;div class=&#34;gblog-markdown--nested gblog-expand__content&#34;&gt;
    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

# Set ENV variables
ENV[&amp;#39;VAGRANT_DEFAULT_PROVIDER&amp;#39;] = &amp;#39;libvirt&amp;#39;

# Global Variables
SWITCH_OS = &amp;#34;CumulusCommunity/cumulus-vx&amp;#34;
SWITCH_VERSION = &amp;#34;3.7.15&amp;#34;
SERVER_OS= &amp;#34;generic/ubuntu2004&amp;#34;


# Build scripts
$switches_script = &amp;lt;&amp;lt;EOF
sudo net add hostname $1
sudo net add vrf mgmt
sudo net add int swp1-$2
sudo net commit
EOF

$servers_script = &amp;lt;&amp;lt;EOF
sudo ip link set eth1 up
sudo apt-get install net-tools -y
sudo apt-get install inetutils-traceroute -y
sudo apt-get install lldpd -y
EOF

$mgmt_server_script = &amp;lt;&amp;lt;EOF
sudo apt-get install net-tools -y
sudo apt-get install inetutils-traceroute -y
sudo apt-get install lldpd -y
EOF

# Spine and Leaf Fabric - including servers

Vagrant.configure(&amp;#34;2&amp;#34;) do |config|

    config.vm.provider :libvirt do |domain|
        # Change the default allowed number of interfaces from 8 to 52
        domain.nic_adapter_count = 52
        # Change the MGMT network subnet and its default name
        domain.management_network_name = &amp;#34;clos_fabric_mgmt_network&amp;#34;
        domain.management_network_address = &amp;#34;172.16.100.0/24&amp;#34;

  end

################################
###### mgmt-server config ######
################################

config.vm.define &amp;#34;mgmt-server&amp;#34; do |device|
    device.vm.hostname = &amp;#34;mgmt-server&amp;#34;
    device.vm.box = SERVER_OS
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 4096
        domain.cpus = 4
    end

    # No data plane links

    device.vm.provision &amp;#34;shell&amp;#34;, inline: $mgmt_server_script
  end

####################################
########## spine01 config ##########
####################################

  config.vm.define &amp;#34;spine01&amp;#34; do |device|
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true
    device.vm.hostname = &amp;#34;spine01&amp;#34;

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link spine01 swp1  ----&amp;gt; leaf01 swp1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.1&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.2&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp1&amp;#34;,
      auto_config: false

    # Link spine01 swp2  ----&amp;gt; leaf02 swp1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.3&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.4&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp2&amp;#34;,
      auto_config: false

    # Link spine01 swp3  ----&amp;gt; leaf03 swp1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.5&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.6&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp3&amp;#34;,
      auto_config: false

    # Link spine01 swp4  ----&amp;gt; leaf04 swp1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.7&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.8&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp4&amp;#34;,
      auto_config: false

    # Call script + provide values for its variables
    device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;spine01&amp;#34;, &amp;#34;4&amp;#34;]

  end


####################################
########## spine02 config ##########
####################################

config.vm.define &amp;#34;spine02&amp;#34; do |device|
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true
    device.vm.hostname = &amp;#34;spine02&amp;#34;

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link spine02 swp1  ----&amp;gt; leaf01 swp2
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.9&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.10&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp1&amp;#34;,
      auto_config: false

    # Link spine02 swp2  ----&amp;gt; leaf02 swp2
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.11&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.12&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp2&amp;#34;,
      auto_config: false

    # Link spine02 swp3  ----&amp;gt; leaf03 swp2
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.13&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.14&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp3&amp;#34;,
      auto_config: false

    # Link spine02 swp4  ----&amp;gt; leaf04 swp2
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.15&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.16&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp4&amp;#34;,
      auto_config: false


    device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;spine02&amp;#34;, &amp;#34;4&amp;#34;]

  end


####################################
########## leaf01 config ##########
####################################

config.vm.define &amp;#34;leaf01&amp;#34; do |device|
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true
    device.vm.hostname = &amp;#34;leaf01&amp;#34;

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link leaf01 swp1  ----&amp;gt; spine01 swp1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.2&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.1&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp1&amp;#34;,
      auto_config: false

    # Link leaf01 swp2  ----&amp;gt; spine02 swp1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.10&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.9&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp2&amp;#34;,
      auto_config: false

    # Link leaf01 swp3  ----&amp;gt; server01 eth1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.18&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.17&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp3&amp;#34;,
      auto_config: false


    device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;leaf01&amp;#34;, &amp;#34;3&amp;#34;]

  end




####################################
########## leaf02 config ##########
####################################

config.vm.define &amp;#34;leaf02&amp;#34; do |device|
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true
    device.vm.hostname = &amp;#34;leaf02&amp;#34;

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link leaf02 swp1  ----&amp;gt; spine01 swp2
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.4&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.3&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp1&amp;#34;,
      auto_config: false

    # Link leaf02 swp2  ----&amp;gt; spine02 swp2
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.12&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.11&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp2&amp;#34;,
      auto_config: false


    device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;leaf02&amp;#34;, &amp;#34;2&amp;#34;]

  end



####################################
########## leaf03 config ##########
####################################

config.vm.define &amp;#34;leaf03&amp;#34; do |device|
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true
    device.vm.hostname = &amp;#34;leaf03&amp;#34;

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link leaf03 swp1  ----&amp;gt; spine01 swp3
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.6&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.5&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp1&amp;#34;,
      auto_config: false

    # Link leaf03 swp2  ----&amp;gt; spine02 swp3
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.14&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.13&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp2&amp;#34;,
      auto_config: false


    device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;leaf03&amp;#34;, &amp;#34;2&amp;#34;]

  end

####################################
########## leaf04 config ##########
####################################

config.vm.define &amp;#34;leaf04&amp;#34; do |device|
    device.vm.box = SWITCH_OS
    device.vm.box_version = SWITCH_VERSION
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true
    device.vm.hostname = &amp;#34;leaf04&amp;#34;

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link leaf04 swp1  ----&amp;gt; spine01 swp4
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.8&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.7&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp1&amp;#34;,
      auto_config: false

    # Link leaf04 swp2  ----&amp;gt; spine02 swp4
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.16&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.15&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp2&amp;#34;,
      auto_config: false

    # Link leaf04 swp3  ----&amp;gt; server04 eth1
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.20&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.19&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;swp3&amp;#34;,
      auto_config: false


    device.vm.provision &amp;#34;shell&amp;#34;, inline: $switches_script, :args =&amp;gt; [&amp;#34;leaf04&amp;#34;, &amp;#34;3&amp;#34;]

  end


####################################
########## server01 config ##########
####################################


config.vm.define &amp;#34;server01&amp;#34; do |device|
    device.vm.hostname = &amp;#34;server01&amp;#34;
    device.vm.box = SERVER_OS
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link server01 eth1  ----&amp;gt; leaf01 swp3
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.17&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.18&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;eth1&amp;#34;,
      auto_config: false

      device.vm.provision &amp;#34;shell&amp;#34;, inline: $servers_script
  end


####################################
########## server04 config ##########
####################################


config.vm.define &amp;#34;server04&amp;#34; do |device|
    device.vm.hostname = &amp;#34;server04&amp;#34;
    device.vm.box = SERVER_OS
    device.vm.synced_folder &amp;#34;.&amp;#34;, &amp;#34;/vagrant&amp;#34;, disabled: true

    # VM settings
    device.vm.provider :libvirt do |domain|
        domain.memory = 768
        domain.cpus = 1
    end

    # Link server01 eth1  ----&amp;gt; leaf04 swp3
    device.vm.network :private_network,
      :libvirt__tunnel_type =&amp;gt; &amp;#34;udp&amp;#34;,
      :libvirt__tunnel_local_ip =&amp;gt; &amp;#34;127.0.100.19&amp;#34;,
      :libvirt__tunnel_local_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__tunnel_ip =&amp;gt; &amp;#34;127.0.100.20&amp;#34;,
      :libvirt__tunnel_port =&amp;gt; &amp;#34;9999&amp;#34;,
      :libvirt__iface_name =&amp;gt; &amp;#34;eth1&amp;#34;,
      auto_config: false

      device.vm.provision &amp;#34;shell&amp;#34;, inline: $servers_script
  end



end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;running-vagrant-up&#34;&gt;
        Running &amp;lsquo;vagrant up&amp;rsquo;
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#running-vagrant-up&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Running &amp;lsquo;vagrant up&amp;rsquo;&#34; href=&#34;#running-vagrant-up&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Time to bring up the topology. Once we have our Vagranfile completed, we go inside the directory where the file is and run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ vagrant up
Bringing machine &amp;#39;mgmt-server&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;spine01&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;spine02&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;leaf01&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;leaf02&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;leaf03&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;leaf04&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;server01&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
Bringing machine &amp;#39;server04&amp;#39; up with &amp;#39;libvirt&amp;#39; provider...
...output trimmed...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s check the status after the &amp;lsquo;vagrant up&amp;rsquo; command finished:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ vagrant status
Current machine states:

mgmt-server               running (libvirt)
spine01                   running (libvirt)
spine02                   running (libvirt)
leaf01                    running (libvirt)
leaf02                    running (libvirt)
leaf03                    running (libvirt)
leaf04                    running (libvirt)
server01                  running (libvirt)
server04                  running (libvirt)

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, looking good, it seems all VMs are up and running. Let&amp;rsquo;s see if the devices got their MGMT IP via DHCP:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ virsh net-list 
 Name                       State    Autostart   Persistent
-------------------------------------------------------------
 clos_fabric_mgmt_network   active   no          yes
 default                    active   yes         yes

lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ virsh net-dhcp-leases clos_fabric_mgmt_network
 Expiry Time           MAC address         Protocol   IP address          Hostname      Client ID or DUID
------------------------------------------------------------------------------------------------------------
 2022-07-23 08:23:10   52:54:00:32:b8:46   ipv4       172.16.100.183/24   mgmt-server   ...output trimmed...
 2022-07-23 08:23:26   52:54:00:5e:59:fd   ipv4       172.16.100.59/24    leaf03        -
 2022-07-23 08:23:27   52:54:00:62:24:7c   ipv4       172.16.100.47/24    leaf02        -
 2022-07-23 08:23:27   52:54:00:80:ed:99   ipv4       172.16.100.159/24   spine01       -
 2022-07-23 08:23:29   52:54:00:84:d2:b9   ipv4       172.16.100.18/24    leaf04        -
 2022-07-23 08:23:20   52:54:00:9d:2a:3c   ipv4       172.16.100.132/24   server01      ...output trimmed...
 2022-07-23 08:23:27   52:54:00:c3:fa:1a   ipv4       172.16.100.112/24   leaf01        -
 2022-07-23 08:23:27   52:54:00:e2:b4:67   ipv4       172.16.100.50/24    spine02       -
 2022-07-23 08:23:20   52:54:00:ef:9b:e8   ipv4       172.16.100.11/24    server04      ...output trimmed...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great, time for the final test, LLDP outputs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ vagrant ssh spine01 -c &amp;#34;sudo net show lldp&amp;#34;

LocalPort  Speed  Mode     RemoteHost  RemotePort
---------  -----  -------  ----------  ----------
swp1       1G     Default  leaf01      swp1
swp2       1G     Default  leaf02      swp1
swp3       1G     Default  leaf03      swp1
swp4       1G     Default  leaf04      swp1
Connection to 172.16.100.159 closed.
lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ vagrant ssh spine02 -c &amp;#34;sudo net show lldp&amp;#34;

LocalPort  Speed  Mode     RemoteHost  RemotePort
---------  -----  -------  ----------  ----------
swp1       1G     Default  leaf01      swp2
swp2       1G     Default  leaf02      swp2
swp3       1G     Default  leaf03      swp2
swp4       1G     Default  leaf04      swp2
Connection to 172.16.100.50 closed.
lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ vagrant ssh server01 -c &amp;#34;sudo lldpcli show nei summary&amp;#34;
-------------------------------------------------------------------------------
LLDP neighbors:
-------------------------------------------------------------------------------
Interface:    eth1, via: LLDP
  Chassis:     
    ChassisID:    mac 52:54:00:c3:fa:1a
    SysName:      leaf01
  Port:        
    PortID:       ifname swp3
    PortDescr:    swp3
    TTL:          120
-------------------------------------------------------------------------------
Connection to 172.16.100.132 closed.
lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ vagrant ssh server04 -c &amp;#34;sudo lldpcli show nei summary&amp;#34;
-------------------------------------------------------------------------------
LLDP neighbors:
-------------------------------------------------------------------------------
Interface:    eth1, via: LLDP
  Chassis:     
    ChassisID:    mac 52:54:00:84:d2:b9
    SysName:      leaf04
  Port:        
    PortID:       ifname swp3
    PortDescr:    swp3
    TTL:          120
-------------------------------------------------------------------------------
Connection to 172.16.100.11 closed.
lab@lab-HP-Z620-Workstation:~/NetworkAuto/test_libvirt_tunnels$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can see from the LLDP outputs above, our topology is up and working as per our diagram. In terms of data plane,
we don&amp;rsquo;t have anything configured yet, but we can manage all devices from either our host machine or using the
mgmt-server VM.&lt;/p&gt;
&lt;p&gt;In conclusion, we&amp;rsquo;ve reached our goal. We&amp;rsquo;ve got a topology ready to start running our various automation scripts
or to test all the new fancy technologies.&lt;/p&gt;
&lt;div class=&#34;gblog-post__anchorwrap&#34;&gt;
    &lt;h2 id=&#34;further-reading&#34;&gt;
        Further Reading
        &lt;a data-clipboard-text=&#34;https://iserghini.github.io/posts/getting-started-with-vagrant-libvirt/#further-reading&#34; class=&#34;gblog-post__anchor clip flex align-center&#34; aria-label=&#34;Anchor Further Reading&#34; href=&#34;#further-reading&#34;&gt;
            &lt;svg class=&#34;gblog-icon gblog_link&#34;&gt;&lt;use xlink:href=&#34;#gblog_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;
        &lt;/a&gt;
    &lt;/h2&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt&#34; target=&#34;_blank&#34;&gt;https://github.com/vagrant-libvirt/vagrant-libvirt&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.rubydoc.info/gems/vagrant-libvirt/&#34; target=&#34;_blank&#34;&gt;https://www.rubydoc.info/gems/vagrant-libvirt/&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.vagrantup.com/docs&#34; target=&#34;_blank&#34;&gt;https://www.vagrantup.com/docs&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/ddutt/cloud-native-data-center-networking&#34; target=&#34;_blank&#34;&gt;https://github.com/ddutt/cloud-native-data-center-networking&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://codingpackets.com/blog/pseudo-wires-with-vagrant-and-libvirt/&#34; target=&#34;_blank&#34;&gt;https://codingpackets.com/blog/pseudo-wires-with-vagrant-and-libvirt/&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/ipspace/netsim-tools&#34; target=&#34;_blank&#34;&gt;https://github.com/ipspace/netsim-tools&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Even for this, Virtualbox has now become a problem, as it no longer works with the new M1,M2,..MACs.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;This post assumes that you have KVM and hardware virtualization already configured.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;I&amp;rsquo;ll be covering this in a future post.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
            </content>  
                                <category scheme="https://iserghini.github.io/authors/Ismael" term="Ismael" label="Ismael" /> 
        </entry>
</feed>
